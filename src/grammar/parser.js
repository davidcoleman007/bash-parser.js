
// deno-lint-ignore-file
// deno-fmt-ignore-file
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,28],$V2=[1,6],$V3=[1,29],$V4=[1,34],$V5=[1,30],$V6=[1,26],$V7=[1,5],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,27],$Vc=[1,25],$Vd=[1,36],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[6,31,54],$Vo=[1,50],$Vp=[1,51],$Vq=[6,13,27,29,31,32,39,41,42,44,49,75,76,78,79,80,81,82,85,86,87,88,94,96,98,100,101,102,103,104,105,106,108],$Vr=[6,9,11,29,31,44,49,54,76,78,79,80,86,87,88],$Vs=[1,52],$Vt=[6,9,11,15,29,31,44,49,54,76,78,79,80,86,87,88],$Vu=[1,62],$Vv=[6,9,11,15,29,31,44,49,54,76,78,79,80,86,87,88,96,98,100,101,102,103,104,105,106,108],$Vw=[6,9,11,15,29,31,42,44,49,54,76,78,79,80,86,87,88,94,96,98,100,101,102,103,104,105,106,108],$Vx=[6,9,11,15,29,31,42,44,49,54,76,78,79,80,86,87,88,96,98,100,101,102,103,104,105,106,108],$Vy=[1,66],$Vz=[1,73],$VA=[1,74],$VB=[1,81],$VC=[1,89],$VD=[13,27,32,39,41,42,75,81,82,85,94,96,98,100,101,102,103,104,105,106,108],$VE=[2,128],$VF=[1,96],$VG=[1,102],$VH=[29,44,49,76,78,79,80,86,87,88],$VI=[29,31,44,49,54,76,78,79,80,86,87,88],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[76,87],$VT=[1,130],$VU=[2,127],$VV=[29,31,44,49,76,78,79,80,86,87,88],$VW=[2,37],$VX=[1,152],$VY=[1,153],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[1,157],$V11=[1,158],$V21=[1,159],$V31=[31,42,54],$V41=[27,42,44],$V51=[1,174],$V61=[1,175],$V71=[1,193],$V81=[1,194],$V91=[1,211],$Va1=[15,29],$Vb1=[44,49],$Vc1=[1,222];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"complete_command":3,"list":4,"separator":5,"EOF":6,"and_or":7,"pipeline":8,"AND_IF":9,"linebreak":10,"OR_IF":11,"pipe_sequence":12,"Bang":13,"command":14,"PIPE":15,"simple_command":16,"compound_command":17,"redirect_list":18,"function_definition":19,"brace_group":20,"subshell":21,"for_clause":22,"case_clause":23,"if_clause":24,"while_clause":25,"until_clause":26,"OPEN_PAREN":27,"compound_list":28,"CLOSE_PAREN":29,"term":30,"NEWLINE_LIST":31,"For":32,"name":33,"do_group":34,"LINEBREAK_IN":35,"In":36,"in":37,"wordlist":38,"NAME":39,"wordlist_repetition_plus0":40,"Case":41,"WORD":42,"case_list":43,"Esac":44,"case_list_ns":45,"case_item_ns":46,"case_item":47,"pattern":48,"DOUBLE_SEMICOLON":49,"condition":50,"OPEN_BRACKET":51,"test_op":52,"CLOSE_BRACKET":53,"SEPARATOR_OP":54,"op":55,"DOPEN_BRACKET":56,"DCLOSE_BRACKET":57,"Equal":58,"NotEqual":59,"LessThan":60,"LessThanOrEqual":61,"GreaterThan":62,"GreaterThanOrEqual":63,"And":64,"Or":65,"IsStringNull":66,"IsStringNotNull":67,"IsDirectory":68,"FileExists":69,"IsFile":70,"IsFileNotEmpty":71,"IsReadable":72,"IsWritable":73,"IsExecutable":74,"If":75,"Then":76,"else_part":77,"Fi":78,"Elif":79,"Else":80,"While":81,"Until":82,"fname":83,"function_body":84,"Lbrace":85,"Rbrace":86,"Do":87,"Done":88,"cmd_prefix":89,"cmd_word":90,"cmd_suffix":91,"cmd_name":92,"io_redirect":93,"ASSIGNMENT_WORD":94,"io_file":95,"IO_NUMBER":96,"io_here":97,"LESS":98,"filename":99,"LESS_AND":100,"GREAT":101,"GREAT_AND":102,"DOUBLE_GREAT":103,"LESS_GREAT":104,"CLOBBER":105,"DOUBLE_LESS":106,"here_end":107,"DOUBLE_LESS_DASH":108,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"AND_IF",11:"OR_IF",13:"Bang",15:"PIPE",27:"OPEN_PAREN",29:"CLOSE_PAREN",31:"NEWLINE_LIST",32:"For",35:"LINEBREAK_IN",36:"In",39:"NAME",41:"Case",42:"WORD",44:"Esac",49:"DOUBLE_SEMICOLON",51:"OPEN_BRACKET",53:"CLOSE_BRACKET",54:"SEPARATOR_OP",56:"DOPEN_BRACKET",57:"DCLOSE_BRACKET",58:"Equal",59:"NotEqual",60:"LessThan",61:"LessThanOrEqual",62:"GreaterThan",63:"GreaterThanOrEqual",64:"And",65:"Or",66:"IsStringNull",67:"IsStringNotNull",68:"IsDirectory",69:"FileExists",70:"IsFile",71:"IsFileNotEmpty",72:"IsReadable",73:"IsWritable",74:"IsExecutable",75:"If",76:"Then",78:"Fi",79:"Elif",80:"Else",81:"While",82:"Until",85:"Lbrace",86:"Rbrace",87:"Do",88:"Done",94:"ASSIGNMENT_WORD",96:"IO_NUMBER",98:"LESS",100:"LESS_AND",101:"GREAT",102:"GREAT_AND",103:"DOUBLE_GREAT",104:"LESS_GREAT",105:"CLOBBER",106:"DOUBLE_LESS",108:"DOUBLE_LESS_DASH"},
productions_: [0,[3,3],[3,2],[3,3],[3,4],[4,3],[4,1],[7,1],[7,4],[7,4],[8,1],[8,2],[12,1],[12,4],[14,1],[14,1],[14,2],[14,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[21,3],[28,1],[28,2],[28,2],[28,3],[30,3],[30,1],[22,4],[22,5],[22,5],[22,6],[33,1],[37,1],[38,1],[23,7],[23,7],[23,6],[45,2],[45,1],[43,2],[43,1],[46,3],[46,4],[46,4],[46,5],[47,5],[47,5],[47,6],[47,6],[48,1],[48,3],[50,6],[50,7],[50,5],[50,6],[50,6],[50,7],[50,5],[50,6],[50,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[24,6],[24,5],[77,4],[77,5],[77,2],[25,3],[26,3],[19,5],[84,1],[84,2],[83,1],[20,3],[34,3],[16,3],[16,2],[16,1],[16,2],[16,1],[92,1],[90,1],[89,1],[89,2],[89,1],[89,2],[91,1],[91,2],[91,1],[91,2],[18,1],[18,2],[93,1],[93,2],[93,1],[93,2],[95,2],[95,2],[95,2],[95,2],[95,2],[95,2],[95,2],[99,1],[97,2],[97,2],[107,1],[10,1],[10,0],[5,1],[5,1],[40,1],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return yy.checkAsync($$[$0-2], $$[$0-1])
break;
case 2: case 3:
 return $$[$0-1] 
break;
case 4:
 return yy.checkAsync($$[$0-2], $$[$0-3])
break;
case 5:
this.$ = yy.listAppend($$[$0-2], $$[$0], $$[$0-1]);
break;
case 6:
this.$ = yy.list($$[$0]);
break;
case 7: case 26: case 27: case 112:
this.$ = $$[$0];
break;
case 8:
this.$ = yy.andAndOr($$[$0-3], $$[$0]);
break;
case 9:
this.$ = yy.orAndOr($$[$0-3], $$[$0]);
break;
case 10:
this.$ = yy.pipeLine($$[$0]);
break;
case 11:
this.$ = yy.bangPipeLine($$[$0]);
break;
case 12:
this.$ = yy.pipeSequence($$[$0]);
break;
case 13:
this.$ = yy.pipeSequenceAppend($$[$0-3], $$[$0]);
break;
case 16:
this.$ = yy.addRedirections($$[$0-1], $$[$0])
break;
case 25:
this.$ = yy.subshell($$[$0-1], $$[$0-2].loc, $$[$0].loc);
break;
case 28: case 29:
this.$ = yy.checkAsync($$[$0-1], $$[$0]);
break;
case 30:
this.$ = yy.termAppend($$[$0-2], $$[$0], $$[$0-1]);
break;
case 31:
this.$ = yy.term($$[$0]);
break;
case 32:
this.$ = yy.forClauseDefault($$[$0-2], $$[$0], $$[$0-3].loc);
break;
case 33: case 34:
this.$ = yy.forClauseDefault($$[$0-3], $$[$0], $$[$0-4].loc);
break;
case 35:
this.$ = yy.forClause($$[$0-4], $$[$0-2], $$[$0], $$[$0-5].loc);
break;
case 39: case 40:
this.$ = yy.caseClause($$[$0-5], $$[$0-1], $$[$0-6].loc, $$[$0].loc);
break;
case 41:
this.$ = yy.caseClause($$[$0-4], null, $$[$0-5].loc, $$[$0].loc);
break;
case 42: case 44:
this.$ = yy.caseListAppend($$[$0-1], $$[$0]);
break;
case 43: case 45:
this.$ = yy.caseList($$[$0]);
break;
case 46:
this.$ = yy.caseItem($$[$0-2], null, $$[$0-2][0].loc, $$[$0-1].loc);
break;
case 47:
this.$ = yy.caseItem($$[$0-3], $$[$0-1], $$[$0-3][0].loc, $$[$0-1].loc);
break;
case 48:
this.$ = yy.caseItem($$[$0-2], null, $$[$0-3].loc, $$[$0-1].loc );
break;
case 49:
this.$ = yy.caseItem($$[$0-3], $$[$0-1], $$[$0-4].loc, $$[$0-1].loc);
break;
case 50:
this.$ = yy.caseItem($$[$0-4], null, $$[$0-4][0].loc, $$[$0-1].loc);
break;
case 51:
this.$ = yy.caseItem($$[$0-4], $$[$0-2], $$[$0-4][0].loc, $$[$0-1].loc);
break;
case 52:
this.$ = yy.caseItem($$[$0-4], null, $$[$0-5].loc, $$[$0-1].loc );
break;
case 53:
this.$ = yy.caseItem($$[$0-4], $$[$0-2], $$[$0-5].loc, $$[$0-1].loc);
break;
case 54:
this.$ = yy.pattern($$[$0]);
break;
case 55:
this.$ = yy.patternAppend($$[$0-2], $$[$0]);
break;
case 56: case 60:
this.$ = yy.testExpression($$[$0-3], $$[$0-2], true, $$[$0-5].loc, $$[$0-1].loc);
break;
case 57: case 61:
this.$ = yy.logicalExpression($$[$0-4], $$[$0-3], $$[$0-2], true, $$[$0-6].loc, $$[$0-1].loc);
break;
case 58: case 62:
this.$ = yy.testExpression($$[$0-3], $$[$0-2], false, $$[$0-4].loc, $$[$0-1].loc);
break;
case 59: case 63:
this.$ = yy.logicalExpression($$[$0-4], $$[$0-3], $$[$0-2], false, $$[$0-5].loc, $$[$0-1].loc);
break;
case 82:
this.$ = yy.ifClause($$[$0-4], $$[$0-2], $$[$0-1], $$[$0-5].loc, $$[$0].loc);
break;
case 83:
this.$ = yy.ifClause($$[$0-3], $$[$0-1], null, $$[$0-4].loc, $$[$0].loc);
break;
case 84:
this.$ = yy.ifClause($$[$0-2], $$[$0], null, $$[$0-3].loc, $$[$0].loc);
break;
case 85:
this.$ = yy.ifClause($$[$0-3], $$[$0-1], $$[$0], $$[$0-4].loc, $$[$0].loc);
break;
case 86:
this.$ = yy.elseClause($$[$0], $$[$0-1]);
break;
case 87:
this.$ = yy.while($$[$0-1], $$[$0], $$[$0-2]);
break;
case 88:
this.$ = yy.until($$[$0-1], $$[$0], $$[$0-2]);
break;
case 89:
this.$ = yy.functionDefinition($$[$0-4], $$[$0]);
break;
case 90:
this.$ = [$$[$0], null];
break;
case 91:
this.$ = [$$[$0-1], $$[$0]];
break;
case 93:
this.$ = yy.braceGroup($$[$0-1], $$[$0-2].loc, $$[$0].loc);
break;
case 94:
this.$ = yy.doGroup($$[$0-1], $$[$0-2].loc, $$[$0].loc);
break;
case 95:
this.$ =yy.command($$[$0-2], $$[$0-1], $$[$0]);
break;
case 96:
this.$ =yy.command($$[$0-1], $$[$0], null);
break;
case 97:
this.$ =yy.commandAssignment($$[$0]);
break;
case 98:
this.$ =yy.command(null, $$[$0-1], $$[$0]);
break;
case 99:
this.$ =yy.command(null, $$[$0]);
break;
case 100:
this.$ =yy.commandName(yytext) /* Apply rule 7a */;
break;
case 101:
this.$ = yytext	/* Apply rule 7B */;
break;
case 102: case 104:
this.$ = yy.prefix($$[$0]);
break;
case 103: case 105:
this.$ = yy.prefixAppend($$[$0-1], $$[$0]);
break;
case 106: case 108:
this.$ = yy.suffix($$[$0]);
break;
case 107: case 109:
this.$ = yy.suffixAppend($$[$0-1], $$[$0]);
break;
case 110: case 131:
this.$ = [$$[$0]];
break;
case 111:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 113:
this.$ = yy.numberIoRedirect($$[$0], $$[$0-1]);
break;
case 116: case 117: case 118: case 119: case 120: case 121: case 122:
this.$ =yy.ioRedirect($$[$0-1], $$[$0]);
break;
case 132:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,31:$V2,32:$V3,39:$V4,41:$V5,42:$V6,54:$V7,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{1:[3]},{5:47,6:[1,48],31:$V2,54:$V7},{4:49,7:4,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($Vn,[2,6],{9:$Vo,11:$Vp}),o($Vq,[2,129]),o($Vq,[2,130]),o($Vr,[2,7]),o($Vr,[2,10],{15:$Vs}),{12:53,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($Vt,[2,12]),o($Vt,[2,14]),o($Vt,[2,15],{95:35,97:37,18:54,93:55,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vt,[2,17]),o($Vt,[2,97],{95:35,97:37,90:56,93:57,42:[1,59],94:[1,58],96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vt,[2,99],{95:35,97:37,91:60,93:61,42:$Vu,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vv,[2,18]),o($Vv,[2,19]),o($Vv,[2,20]),o($Vv,[2,21]),o($Vv,[2,22]),o($Vv,[2,23]),o($Vv,[2,24]),{27:[1,63]},o($Vw,[2,102]),o($Vw,[2,104]),o($Vx,[2,100]),{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:64,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:68,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{33:69,39:[1,70]},{42:[1,71]},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:75,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,50:72,51:$Vz,56:$VA,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:75,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,50:76,51:$Vz,56:$VA,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:75,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,50:77,51:$Vz,56:$VA,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{27:[2,92]},o($Vw,[2,112]),{95:78,97:79,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($Vw,[2,114]),{42:$VB,99:80},{42:$VB,99:82},{42:$VB,99:83},{42:$VB,99:84},{42:$VB,99:85},{42:$VB,99:86},{42:$VB,99:87},{42:$VC,107:88},{42:$VC,107:90},{6:[1,91],7:92,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{1:[2,2]},{5:94,6:[1,93],31:$V2,54:$V7},o($VD,$VE,{10:95,31:$VF}),o($VD,$VE,{10:97,31:$VF}),o([27,32,39,41,42,75,81,82,85,94,96,98,100,101,102,103,104,105,106,108],$VE,{10:98,31:$VF}),o($Vr,[2,11],{15:$Vs}),o($Vt,[2,16],{95:35,97:37,93:99,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vv,[2,110]),o($Vt,[2,96],{95:35,97:37,93:61,91:100,42:$Vu,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vw,[2,103]),o($Vw,[2,105]),o($Vx,[2,101]),o($Vt,[2,98],{95:35,97:37,93:101,42:$VG,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vx,[2,106]),o($Vx,[2,108]),{29:[1,103]},{86:[1,104]},o($VH,[2,26],{5:105,31:$V2,54:$V7}),{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,30:106,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($VI,[2,31],{9:$Vo,11:$Vp}),{29:[1,107]},{10:108,31:$VF,35:[1,109],36:[1,110],37:111,87:$VE},o([31,35,36,87],[2,36]),{10:112,31:$VF,36:$VE},{76:[1,113]},{13:[1,114],42:[1,116],52:115,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{13:[1,126],42:[1,128],52:127,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},o($VS,[2,64]),{34:129,87:$VT},{34:131,87:$VT},o($Vw,[2,113]),o($Vw,[2,115]),o($Vw,[2,116]),o($Vw,[2,123]),o($Vw,[2,117]),o($Vw,[2,118]),o($Vw,[2,119]),o($Vw,[2,120]),o($Vw,[2,121]),o($Vw,[2,122]),o($Vw,[2,124]),o($Vw,[2,126]),o($Vw,[2,125]),{1:[2,1]},o($Vn,[2,5],{9:$Vo,11:$Vp}),{1:[2,3]},{6:[1,132],7:92,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{8:133,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o([13,27,32,36,39,41,42,44,75,81,82,85,87,94,96,98,100,101,102,103,104,105,106,108],$VU),{8:134,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{14:135,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($Vv,[2,111]),o($Vt,[2,95],{95:35,97:37,93:101,42:$VG,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vx,[2,107]),o($Vx,[2,109]),o([27,32,41,75,81,82,85],$VE,{10:136,31:$VF}),o($Vv,[2,93]),o($VV,[2,28],{8:7,12:8,14:10,16:11,17:12,19:13,89:14,92:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,83:23,93:24,95:35,97:37,7:137,13:$V0,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,85:$Vb,94:$Vc,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($VH,[2,27],{5:138,31:$V2,54:$V7}),o($Vv,[2,25]),{34:139,87:$VT},{5:140,31:$V2,54:$V7},{5:141,31:$V2,42:$VW,54:$V7},{38:142,40:143,42:[1,144]},{36:[1,146],37:145},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:147,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{42:[1,149],52:148,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{42:[1,150]},{55:151,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,63:$V01,64:$V11,65:$V21},{42:[2,73]},{42:[2,74]},{42:[2,75]},{42:[2,76]},{42:[2,77]},{42:[2,78]},{42:[2,79]},{42:[2,80]},{42:[2,81]},{42:[1,161],52:160,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{42:[1,162]},{55:163,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,63:$V01,64:$V11,65:$V21},o($Vv,[2,87]),{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:164,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($Vv,[2,88]),{1:[2,4]},o($Vr,[2,8]),o($Vr,[2,9]),o($Vt,[2,13]),{17:166,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,32:$V3,41:$V5,75:$V8,81:$V9,82:$Va,84:165,85:$Vb},o($VI,[2,30],{9:$Vo,11:$Vp}),o($VV,[2,29],{8:7,12:8,14:10,16:11,17:12,19:13,89:14,92:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,83:23,93:24,95:35,97:37,7:137,13:$V0,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,85:$Vb,94:$Vc,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vv,[2,32]),{34:167,87:$VT},{34:168,87:$VT},{5:169,31:$V2,54:$V7},o([31,54],[2,38],{42:[1,170]}),o($V31,[2,131]),o($V41,$VE,{10:171,31:$VF}),o([27,31,42,44],$VW),{77:172,78:[1,173],79:$V51,80:$V61},{42:[1,176]},{55:177,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,63:$V01,64:$V11,65:$V21},{53:[1,178]},{42:[1,179]},{42:[2,65]},{42:[2,66]},{42:[2,67]},{42:[2,68]},{42:[2,69]},{42:[2,70]},{42:[2,71]},{42:[2,72]},{42:[1,180]},{55:181,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,63:$V01,64:$V11,65:$V21},{57:[1,182]},{42:[1,183]},{88:[1,184]},o($Vt,[2,89]),o($Vt,[2,90],{95:35,97:37,93:55,18:185,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vv,[2,33]),o($Vv,[2,34]),{34:186,87:$VT},o($V31,[2,132]),{27:$V71,42:$V81,43:187,44:[1,189],45:188,46:191,47:190,48:192},{78:[1,195]},o($Vv,[2,83]),{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:75,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,50:196,51:$Vz,56:$VA,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:197,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},{53:[1,198]},{42:[1,199]},{54:[1,200]},{53:[1,201]},{57:[1,202]},{42:[1,203]},{54:[1,204]},{57:[1,205]},o($Vv,[2,94]),o($Vt,[2,91],{95:35,97:37,93:99,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Vv,[2,35]),{27:$V71,42:$V81,44:[1,206],46:208,47:207,48:192},{44:[1,209]},o($Vv,[2,41]),o($V41,[2,45]),{44:[2,43]},{15:$V91,29:[1,210]},{42:$V81,48:212},o($Va1,[2,54]),o($Vv,[2,82]),{76:[1,213]},{78:[2,86]},{54:[1,214]},{53:[1,215]},o($VS,[2,58]),{54:[1,216]},{54:[1,217]},{57:[1,218]},o($VS,[2,62]),{54:[1,219]},o($Vv,[2,39]),o($V41,[2,44]),{44:[2,42]},o($Vv,[2,40]),o($Vb1,$VE,{8:7,12:8,14:10,16:11,17:12,19:13,89:14,92:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,83:23,93:24,95:35,97:37,30:65,7:67,10:220,28:221,13:$V0,27:$V1,31:$Vc1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,85:$Vb,94:$Vc,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),{42:[1,223]},{15:$V91,29:[1,224]},{7:67,8:7,12:8,13:$V0,14:10,16:11,17:12,19:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:225,30:65,31:$Vy,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,83:23,85:$Vb,89:14,92:15,93:24,94:$Vc,95:35,96:$Vd,97:37,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm},o($VS,[2,56]),{54:[1,226]},o($VS,[2,59]),o($VS,[2,60]),{54:[1,227]},o($VS,[2,63]),{44:[2,46],49:[1,228]},{10:230,31:$VF,44:$VE,49:[1,229]},o($Vb1,$VU,{8:7,12:8,14:10,16:11,17:12,19:13,89:14,92:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,83:23,93:24,95:35,97:37,7:67,30:106,13:$V0,27:$V1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,85:$Vb,94:$Vc,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),o($Va1,[2,55]),o($Vb1,$VE,{8:7,12:8,14:10,16:11,17:12,19:13,89:14,92:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,83:23,93:24,95:35,97:37,30:65,7:67,10:231,28:232,13:$V0,27:$V1,31:$Vc1,32:$V3,39:$V4,41:$V5,42:$V6,75:$V8,81:$V9,82:$Va,85:$Vb,94:$Vc,96:$Vd,98:$Ve,100:$Vf,101:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,108:$Vm}),{77:233,78:[2,84],79:$V51,80:$V61},o($VS,[2,57]),o($VS,[2,61]),o($V41,$VE,{10:234,31:$VF}),o($V41,$VE,{10:235,31:$VF}),{44:[2,47]},{44:[2,48],49:[1,236]},{10:238,31:$VF,44:$VE,49:[1,237]},{78:[2,85]},o($V41,[2,50]),o($V41,[2,51]),o($V41,$VE,{10:239,31:$VF}),o($V41,$VE,{10:240,31:$VF}),{44:[2,49]},o($V41,[2,52]),o($V41,[2,53])],
defaultActions: {34:[2,92],48:[2,2],91:[2,1],93:[2,3],117:[2,73],118:[2,74],119:[2,75],120:[2,76],121:[2,77],122:[2,78],123:[2,79],124:[2,80],125:[2,81],132:[2,4],152:[2,65],153:[2,66],154:[2,67],155:[2,68],156:[2,69],157:[2,70],158:[2,71],159:[2,72],191:[2,43],197:[2,86],208:[2,42],230:[2,47],233:[2,85],238:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: async function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    
        var lex = async function () {
            var token;
            token = (await lexer.lex()) || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = await lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
// ESM export
export {parser};
export const Parser = parser.Parser;
